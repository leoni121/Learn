** XSS （Cross Site Scripting）：跨站脚本攻击(Cross Site Scripting)，指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。xss是注入攻击的一种，其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。


** CSRF/XSRF （Cross-site request forgery）：跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，通俗说：XSS有脚本的参与，黑客构造好各种各样功能的脚本让你来触发从而利用你的信息。而CSRF则通过伪装成受信任用户的请求即借你的手触发某些操作。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。通过 XSS 来实现 CSRF 易如反掌，黑客可以通过 XSS 或链接欺骗等途径，让用户在登陆过的浏览器端发起用户所不知道的请求。对于设计不佳的网站，一条正常的链接都能造成 CSRF。

    攻击步骤：
        要完成一次CSRF攻击，受害者必须依次完成两个步骤：
            1.登录受信任网站A，并在本地生成Cookie。
            2.在不登出A的情况下，访问危险网站B。

    注意：
        CSRF被伪造的请求可以是任何来源，而非一定是站内。伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机（即拥有身份 cookie 的浏览器端）发起用户所不知道的请求。

    解决：———— https://blog.csdn.net/xiaoxinshuaiga/article/details/80766369
        ———— （最全）https://www.cnblogs.com/lovesong/p/5233195.html
        （1）.改良站内 API 的设计
        （2）.添加 token 并验证
        （3）.防止XSS注入
        （4）.iframe、ajax（这个不能跨域，得先 XSS）、Flash 内部发起请求（总是个大隐患）
        （5）.在 HTTP 头中自定义属性并验证
        （6）. HTTP Referer,在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站


** XSS 和 CSRF/XSRF 的差异：XSS有脚本的参与，黑客构造好各种各样功能的脚本让你来触发从而利用你的信息。而CSRF则通过伪装成受信任用户的请求即借你的手触发某些操作。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。



**前端安全 ———— http://www.cnblogs.com/vajoy/p/4176908.html
    （1）资源枚举
    （2）XSS攻击
        XSS, 即为（Cross Site Scripting）, 中文名为跨站脚本
       a. 反射型XSS，也叫非持久型XSS，是指发生请求时，XSS代码出现在请求URL中，作为参数提交到服务器，服务器解析并响应。响应结果中包含XSS代码，最后浏览器解析并执行。
       b.存储型XSS，也叫持久型XSS，主要是将XSS代码发送到服务器（不管是数据库、内存还是文件系统等。），然后在下次请求页面的时候就不用带上XSS代码了。（留言板）
       c. DOM XSS攻击不同于反射型XSS和存储型XSS，DOM XSS代码不需要服务器端的解析响应的直接参与，而是通过浏览器端的DOM解析。这完全是客户端的事情。 DOM XSS代码的攻击发生的可能在于我们编写JS代码造成的。我们知道eval语句有一个作用是将一段字符串转换为真正的JS语句，因此在JS中使用eval是很危险的事情，容易造成XSS攻击。避免使用eval语句。
       d. XSS危害
          通过document.cookie盗取cookie
          使用js或css破坏页面正常的结构与样式
          流量劫持（通过访问某段具有window.location.href定位到其他页面）
          Dos攻击：利用合理的客户端请求来占用过多的服务器资源，从而使合法用户无法得到服务器响应。
          利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作。
          利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。
      e. 防御
            对重要的cookie设置httpOnly, 防止客户端通过document.cookie读取cookie。服务端可以设置此字段。
            对用户输入数据的处理
                编码：不能对用户输入的内容都保持原样，对用户输入的数据进行字符实体编码。对于字符实体的概念可以参考文章底部给出的参考链接。
                解码：原样显示内容的时候必须解码，不然显示不到内容了。
                过滤：把输入的一些不合法的东西都过滤掉，从而保证安全性。如移除用户上传的DOM属性，如onerror，移除用户上传的Style节点，iframe, script节点等。

    （3）DOS攻击
        a. 拒绝服务（DoS）指的是向网站发起洪水一样的请求（Traffic Floor），导致服务器超负荷并关闭，处理方法常规是采用QoS（Quality of Service）的软硬件解决方案。

    （4）CSRF攻击
        a. CSRF（Cross Site Request Forgery），中文是跨站点请求伪造,CSRF攻击者在用户已经登录目标网站之后，诱使用户访问一个攻击页面，利用目标网站对用户的信任，以用户身份在攻击页面对目标网站发起伪造用户操作的请求，达到攻击目的。
            <img style="width:0;" src="http://www.cnblogs.com/mvc/Follow/FollowBlogger.aspx?blogUserGuid=4e8c33d0-77fe-df11-ac81-842b2b196315"   />
        b. Web的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的。CSRF攻击的一般是由服务端解决。
        c. 我们可以通过提高CSRF的攻击门槛进行适当的防范，做法有：重要的请求应该通过post方式进行（杜绝通过点击链接进行攻击）、服务端生成随机token，保存在页面隐藏域中，在发出请求的时候一并发出，服务端在验证其在session中的token，两者一致后才处理请求，处理请求后必须马上销毁token。（这种做法可以提高攻击难度）、防范XSS攻击（这样能有效防范CSRF）
    （4）钓鱼攻击指的是网站的伪造，比如ta0bao.com，然后在其中应用XSS等方式发起攻击。

    （5）SQL注入这块不想细聊了，相信很多朋友都听到耳朵长茧，不外乎是提交含有SQL操作语句的信息给后端，后端如果没有做好过滤就执行该语句，攻击者自然可以随意操纵该站点的数据库。
       比如有一个图书馆站点book.com，你点进一本书的详情页面，其url是这样的：
       book.com/book?id=100
       说明这本书在数据库中的键值是100，后端收到url参数后就执行了数据库查询操作：
       select * from booktable where id='100'
       那么如果我们把url更改为
       book.com/book?id=100'or'1'='1
       那么数据库操作执行就变成了：
       select * from booktable where id='100'or'1'='1'
       从而取出了整个booktable 表单的全部数据。

