** XSS （Cross Site Scripting）：跨站脚本攻击(Cross Site Scripting)，指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。xss是注入攻击的一种，其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。


** CSRF/XSRF （Cross-site request forgery）：跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，通俗说：XSS有脚本的参与，黑客构造好各种各样功能的脚本让你来触发从而利用你的信息。而CSRF则通过伪装成受信任用户的请求即借你的手触发某些操作。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。通过 XSS 来实现 CSRF 易如反掌，黑客可以通过 XSS 或链接欺骗等途径，让用户在登陆过的浏览器端发起用户所不知道的请求。对于设计不佳的网站，一条正常的链接都能造成 CSRF。

    攻击步骤：
        要完成一次CSRF攻击，受害者必须依次完成两个步骤：
            1.登录受信任网站A，并在本地生成Cookie。
            2.在不登出A的情况下，访问危险网站B。

    注意：
        CSRF被伪造的请求可以是任何来源，而非一定是站内。伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机（即拥有身份 cookie 的浏览器端）发起用户所不知道的请求。

    解决：———— https://blog.csdn.net/xiaoxinshuaiga/article/details/80766369
        （1）.改良站内 API 的设计
        （2）.添加 token 并验证
        （3）.防止XSS注入
        （4）.iframe、ajax（这个不能跨域，得先 XSS）、Flash 内部发起请求（总是个大隐患）
        （5）.在 HTTP 头中自定义属性并验证
        （6）. HTTP Referer,在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站


** XSS 和 CSRF/XSRF 的差异：XSS有脚本的参与，黑客构造好各种各样功能的脚本让你来触发从而利用你的信息。而CSRF则通过伪装成受信任用户的请求即借你的手触发某些操作。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。
