** 二叉树：二叉树是每个结点最多有两个子树的树结构

** 二叉查找/搜索/排序树  BST  (binary search/sort tree)
    或者是一棵空树；
    或者是具有下列性质的二叉树：
        a.若它的左子树不空，则左子树上所有结点的值均小于它的根节点的值；
        b.若它的右子树上所有结点的值均大于它的根节点的值；
        c.它的左、右子树也分别为二叉排序树。
    注意：对二叉查找树进行中序遍历，得到有序集合。

** 平衡二叉树（Self-balancing binary search tree）  自平衡二叉查找树  又被称为AVL树（有别于AVL算法）
       它是一 棵空树
       或它的左右两个子树的高度差(平衡因子)的绝对值不超过1，
       并且左右两个子树都是一棵平衡二叉树，
       同时，平衡二叉树必定是二叉搜索树，反之则不一定
      平衡因子（平衡度）：结点的平衡因子是结点的左子树的高度减去右子树的高度。（或反之定义）
      平衡二叉树：每个结点的平衡因子都为 1、－1、0 的二叉排序树。或者说每个结点的左右子树的高度最多差1的二叉排序树。
       平衡二叉树的目的是为了减少二叉查找树层次，提高查找速度
       平衡二叉树的常用实现方法有AVL、红黑树、替罪羊树、Treap、伸展树等


** 红黑树（平衡二叉树）,R-B Tree，全称是Red-Black Tree，又称为“红黑树”，它一种平衡二叉树。红黑树的每个节点上都有存储位表示节点的颜色，可以是红(Red)或黑(Black)。
    ———— http://www.360doc.com/content/18/0904/19/25944647_783893127.shtml
   红黑树的特性:
       a.每个节点或者是黑色，或者是红色。
       b.根节点是黑色。
       c.每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]
       d.如果一个节点是红色的，则它的子节点必须是黑色的。
       e.从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。
   注意：
       a.特性(3)中的叶子节点，是只为空(NIL或null)的节点。
       b.特性(5)，确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树
   红黑树的应用比较广泛，主要是用它来存储有序的数据，它的时间复杂度是O(logN)，效率非常之高。
   在O(log n)时间内做查找，插入和删除，这里的n 是树中元素的数目。例如，Java集合中的TreeSet和TreeMap，C++ STL中的set、map，以及Linux虚拟内存的管理，都是通过红黑树去实现的。
