** 原生js中slice(不改变数组)方法和splice(改变数组)区别 ———— http://www.cnblogs.com/yunwei8/p/6510916.html
    slice()方法和splice()方法都是原生js中对数组操作的方法。
    string.slice(start, end)
    arrayObj.slice(start, end)
    arrayObj.splice(index, howLong, item1, item2...);



** getPrototypeOf 获取指定对象的原型



** _proto_ 和 prototype
    实例对象的 _proto_ 就是 其构造函数的 prototype, 如下：
        var protoObj = {
        	name: "nzq"
        }
        function Person() {
        }
        Person.prototype = protoObj
        var nzq = new Person()
        nzq.__proto__ === Person.prototype



** 函数Person的prototype对象的另一个属性是constructor这个属性就指向了函数Person本身



** 数组 和 对象的深拷贝
    (1) 对象
        Object.assign 只是浅层拷贝
    (1) 数组
        function deepCopy(arr) {

        }



** 位操作符：“与，或，非，异或，左移，右移” ———— https://blog.csdn.net/foreverling_ling/article/details/61417649


** ind() 方法返回通过测试（函数内判断）的数组的第一个元素的值。
   find() 方法为数组中的每个元素都调用一次函数执行：
   当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。
   如果没有符合条件的元素返回 undefined
   注意: find() 对于空数组，函数是不会执行的。
   注意: find() 并没有改变数组的原始值。


**
    var F = function(){};
    Object.prototype.a = function(){};
    Function.prototype.b = function(){};
    var f = new F();
    console.log(f.a); //funcion(){}
    console.log(f.b); //undefined
    console.log(F.a); //funcion(){}
    console.log(F.b); //funcion(){}
    F为函数，可以来源于Function、Object可以访问Function和Obejct的原型 ；f是变量，祖先为Object，所以只能访问Object的原型。
