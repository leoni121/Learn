** 参考 ———— https://zhuanlan.zhihu.com/p/55430043


** 引擎，运行时和调用堆栈的概述 ———— https://segmentfault.com/a/1190000017352941
    （1）V8引擎（组成）
        emory Heap(内存堆) — 内存分配地址的地方
        Call Stack(调用堆栈) — 代码执行的地方

    （2）Runtime(运行时)
        我们还有很多引擎之外的 API，我们把这些称为浏览器提供 API 称为 Web API，比如说 DOM、AJAX、setTimeout等等。
        然后我们还拥有如此流行的事件循环和回调队列。

    （3）调用栈
        JavaScript是一种单线程编程语言，这意味着它只有一个调用堆栈。因此，它一次只能做一件事。
        调用栈是一种数据结构，它记录了我们在程序中的位置。如果我们运行到一个函数，它就会将其放置到栈顶，当从这个函数返回的时候，就会将这个函数从栈顶弹出，这就是调用栈做的事情。
        每一个进入调用栈的都称为调用帧，这能清楚的知道当异常发生的时候堆栈追踪是怎么被构造的，堆栈的状态是如何的



** 深入V8引擎&编写优化代码的5个技巧 ———— https://segmentfault.com/a/1190000017369465
    （1）JavaScript引擎是执行 JavaScript 代码的程序或解释器。JavaScript引擎可以实现为标准解释器，或者以某种形式将JavaScript编译为字节码的即时编译器。

    （2）V8 将 JavaScript 代码转换成更高效的机器码，而不是使用解释器。

    （3）在 V8 的 5.9 版本出来之前，V8 引擎使用了两个编译器：
         full-codegen — 一个简单和非常快的编译器，产生简单和相对较慢的机器码。
         Crankshaft — 一种更复杂（Just-In-Time）的优化编译器，生成高度优化的代码。

    （3）V8 引擎也在内部使用多个线程：
        主线程执行你所期望的操作：获取代码、编译代码并执行它
        还有一个单独的线程用于编译，因此主线程可以在前者优化代码的同时继续执行
        一个 Profiler 线程，它会告诉运行时我们花了很多时间，让 Crankshaft 可以优化它们
        一些线程处理垃圾收集器
        当第一次执行 JavaScript 代码时，V8 利用 full-codegen 编译器，直接将解析的 JavaScript 翻译成机器代码而不进行任何转换。这使得它可以非常快速地开始执行机器代码。请注意，V8 不使用中间字节码，从而不需要解释器。
        当代码已经运行一段时间后，分析线程已经收集了足够的数据来判断应该优化哪个方法。
        接下来，Crankshaft  从另一个线程开始优化。它将 JavaScript 抽象语法树转换为被称为 Hydrogen 的高级静态单分配（SSA）表示，并尝试优化 Hydrogen 图，大多数优化都是在这个级别完成的。

    （4）内联代码，第一个优化是提前内联尽可能多的代码。内联是用被调用函数的主体替换调用点（调用函数的代码行）的过程。这个简单的步骤允许下面的优化更有意义。

    （5）隐藏类
        由于使用字典查找内存中对象属性的位置效率非常低，因此 V8 使用了不同的方法：隐藏类。隐藏类与 Java 等语言中使用的固定对象（类）的工作方式类似，只是它们是在运行时创建的。

    （6）内联缓存

    （7）编译成机器码

    （8）垃圾收集

    （9）如何编写优化的 JavaScript
        对象属性的顺序：始终以相同的顺序实例化对象属性，以便可以共享隐藏的类和随后优化的代码。
        动态属性： 因为在实例化之后向对象添加属性将强制执行隐藏的类更改，并降低之前隐藏类所优化的所有方法的执行速度，所以在其构造函数中分配所有对象的属性。
        方法：重复执行相同方法的代码将比仅执行一次的多个不同方法（由于内联缓存）的代码运行得更快。
        数组：避免稀疏数组，其中键值不是自增的数字，并没有存储所有元素的稀疏数组是哈希表。这种数组中的元素访问开销较高。另外，尽量避免预分配大数组。最好是按需增长。最后，不要删除数组中的元素，这会使键值变得稀疏。
        标记值：V8 使用 32 位表示对象和数值。由于数值是 31 位的，它使用了一位来区分它是一个对象（flag = 1）还是一个称为 SMI（SMall Integer）整数（flag = 0）。那么，如果一个数值大于 31 位，V8会将该数字装箱，把它变成一个双精度数，并创建一个新的对象来存放该数字。尽可能使用 31 位有符号数字，以避免对 JS 对象的高开销的装箱操作。

    （10）Ignition and TurboFan
        随着2017年早些时候发布V8 5.9，引入了新的执行管道。 这个新的管道在实际的JavaScript应用程序中实现了更大的性能提升和显着节省内存。
        新的执行流程是建立在 Ignition（ V8 的解释器）和 TurboFan（ V8 的最新优化编译器）之上的。
        自从 V8 5.9 版本问世以来，由于 V8 团队一直努力跟上新的 JavaScript 语言特性以及这些特性所需要的优化，V8 团队已经不再使用 full-codegen 和 Crankshaft（自 2010 年以来为 V8 技术所服务）。
        这意味着 V8 整体上将有更简单和更易维护的架构。这些改进只是一个开始。 新的Ignition和TurboFan管道为进一步优化铺平了道路，这些优化将在未来几年内提升JavaScript性能并缩小V8在Chrome和Node.js中的占用空间。
