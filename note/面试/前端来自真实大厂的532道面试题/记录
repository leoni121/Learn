429. 关于iframe内部和外部变量的读取是如何的
    （1）原来chrome不支持跨frame的变量的获取！于是乎，在iframe页面里调用window.parent.**在chrome里也是不允许的！

    （2）document.getElementById("iframe1").contentWindow -- 最新的chrome 和 fireFox不行
        获取不到子窗口的变量

    （3）document.getElementById("iframe1").contentDocument -- 最新的chrome 和 fireFox 可行
        获取不到子窗口的变量
        window.parent.document.getElementById("father")
        window.parent.变量名
        window.parent.方法



428. 一个数组，有很多数字存在2次，只有一个数字存在一次，怎么样找出这个数字
    (1).异或/HashMap
    function getSingle(arr) {
        var num = 0;
        for(var i = 0, len = arr.length ; i < len ; i++) {
            num ^= arr[i];
        }
        return num;
    }

    (2).异或/HashMap
    一个数组，有很多数字存在2次，只有两个数字存在一次，怎么样找出这个数字
    function getTwoSingle(arr) {
        var num = 0;
        var j = 1; // 用于查找第一位不为0的数
        for(var i = 0, len = arr.length ; i < len ; i++) {
            num ^= arr[i];
        }

        // 遍历找出一位不为0的数
        // 就从小到大 *2
        while(true) {
            if((j & num) === j) { // 找到
                return divArray(arr, j);
            }
            // 未找到
            j *= 2;
        }
        return num;
    }

    function divArray(arr, j) {
        var arr0 = [];
        var arr1 = [];
        var x = 0;
        var temArr = [];

        for(var i = 0, len = arr.length ; i < len ; i++) {
            if((arr[i] & j) === 0) {
                arr0.push(arr[i]);
            } else {
                arr1.push(arr[i]);
            }
        }

        for(var i = 0, len = arr0.length ; i < len ; i++) {
            x ^= arr0[i];
        }
        temArr.push(x);
        x = 0

        for(var i = 0, len = arr1.length ; i < len ; i++) {
            x ^= arr1[i];
        }
        temArr.push(x);

        return temArr
    }

    (3).异或/HashMap
        一个数组，有很多数字存在2次，只有三个数字存在一次，怎么样找出这个数字
        异或：先所有异或得到 “三个” 的异或结果，再找该结果中第一位不为0的为，通过该位将arr数组分为两个数组，数组length为偶的含有“两个”，奇数的含有“一个”。再把奇数数组异或得 “一个”，偶数数组参照重复上述步骤




427. vue的事件绑定和原生有什么区别吗？
    .native 绑定原生事件



426. https ———— https://blog.csdn.net/iispring/article/details/51615631
    HTTPS协议 = HTTP协议 + SSL/TLS协议
    一个HTTPS请求实际上包含了两次HTTP传输，可以细分为8步。
    (1).客户端向服务器发起HTTPS请求，连接到服务器的443端口

    (2).服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。

    (3).服务器将自己的公钥发送给客户端。

    (4).客户端收到服务器端的公钥之后，会对公钥进行检查，验证其合法性，如果发现发现公钥有问题，那么HTTPS传输就无法继续。严格的说，这里应该是验证服务器发送的数字证书的合法性，关于客户端如何验证数字证书的合法性，下文会进行说明。如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，我们将该密钥称之为client key，即客户端密钥，这样在概念上和服务器端的密钥容易进行区分。然后用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文了，至此，HTTPS中的第一次HTTP请求结束。

    (5).客户端会发起HTTPS中的第二个HTTP请求，将加密之后的客户端密钥发送给服务器。

    (6).服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。

    (7).然后服务器将加密后的密文发送给客户端。

    (8).客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样HTTPS中的第二个HTTP请求结束，整个HTTPS传输完成。

    怎么确保服务器发送的数字证书的合法性？
    见 题449



425. HTTP缓存 ———— http://www.cnblogs.com/chenqf/p/6386163.html
    ———— https://www.cnblogs.com/wonyun/p/5524617.html（另一种说法 强缓存和协商缓存）
    （1）强制缓存(size: from disk cache)、对比缓存(status: 304)。强制缓存优先级高于对比缓存，也就是说，当执行强制缓存的规则时，如果缓存生效，直接使用缓存，不再执行对比缓存规则。

    （2）缓存规则信息包含在响应header

    （3）对于强制缓存来说，响应header中会有两个字段来标明失效规则（Expires、Cache-Control）
        a.Expires的值为服务端返回的到期时间，即下一次请求时，请求时间小于服务端返回的到期时间，直接使用缓存数据。不过Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。另一个问题是，到期时间是由服务端生成的，但是客户端时间可能跟服务端时间有误差，这就会导致缓存命中的误差。所以HTTP 1.1 的版本，使用Cache-Control替代。
        b.Cache-Control 是最重要的规则。常见的取值有private、public、no-cache、max-age，no-store，默认为private。
          private:             客户端可以缓存
          public:              客户端和代理服务器都可缓存（前端的同学，可以认为public和private是一样的）
          max-age=xxx:   缓存的内容将在 xxx 秒后失效
          no-cache:          需要使用对比缓存来验证缓存数据（后面介绍）
          no-store:           所有内容都不会缓存，强制缓存，对比缓存都不会触发（对于前端开发来说，缓存越多越好，so...基本上和它说886）

    (4)对比缓存，顾名思义，需要进行比较判断是否可以使用缓存。浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将二者备份至缓存数据库中。再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功后，返回304状态码，通知客户端比较成功，可以使用缓存数据。缓存标识的传递是我们着重需要理解的，它在请求header和响应header间进行传递，一共分为两种标识传递，接下来，我们分开介绍。
        a.Last-Modified(response header) / If-Modified-Since(request header用来发送last-modified)
        b.Etag(服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）) / If-None-Match(发送Etag)。（优先级高于Last-Modified  /  If-Modified-Since）

    （4）用户操作
       用户操作 	          Expires/Cache Control                   	Last-Modified/Etag
       地址栏回车	           有效	                                      有效
       页面链接跳转	           有效	                                      有效
       新开窗口	                有效	                                   有效
       前进/后退	          有效                                       有效
       F5/按钮刷新	          无效，浏览器重置max-age=0	                   有效
       Ctrl+F5	              无效重置cache-control: no-cache	             无效，请求头丢弃该选项



424. preventDefault和stopPropagation的区别



423. js事件模型，捕获和冒泡，阻止冒泡



422. 一个数组只有0、1和2，排序
    function sort(arr) {
      var len = arr.length;
      if (len <= 3) {
        return arr.sort();
      }

      var i = 0 // 记录0 的位置
        ,j = 0 // 记录1的位置
        ,k = len-1; // 记录2的位置

      while (i <= j && i <= k && j <= k) {
        while (arr[i] === 0) {
          i++;
        }
        while (arr[j] === 1) {
          j++;
        }
        while (arr[k] === 2) {
          k--;
        }

        if (i <= k && arr[i] === 2 && arr[k] === 0) {
          [arr[i], arr[k]] = [arr[k], arr[i]];
          i++;j--;
        } else if (j <= k && arr[j] === 2 && arr[k] === 1) {
          [arr[j], arr[k]] = [arr[k], arr[j]];
          j++;
          k--;
        } else if (i <= j && arr[i] === 1 && arr[j] === 0) {
          [arr[i], arr[j]] = [arr[j], arr[i]];
          i++;
          j++;
        } else if (i < j && j < k) {
          arr[i] = 0;
          arr[j] = 1;
          arr[k] = 2;
          i++;j++;j--;
        }

        if (i > j) {
          j = i;
        }
      }

      return arr
    }



421. 给你一个DOM元素，用CSS的方式让他呈现两个的想过，只有一个DOM元素



420. 组件怎么样拿到redux的数据



419. react中props和state的区别



418. hashmap原理？



417. 栈和队列有什么区别，具体的应用场景 ———— https://blog.csdn.net/donahue_ldz/article/details/12751787
    （1）栈是后进先出
        a.进制装换
        b.判断回文
        c.语法检测，那么具体处理的方法就是:凡是遇到括号的前半部分，即把这个元素入栈，凡是遇到括号的后半部分就比对栈顶元素是否该元素相匹配，如果匹配，则前半部分出栈，否则就是匹配出错
        d.逆序输出
        c.迷宫问题
    （2）队列是先进先出。
        a.共享打印机
        b.消息队列



416. 排序的几种方法知道吗，是如何实现的
    见 算法 =》 排序



415. HTTP1.1中Etg和if-None-Match哪个权重比较大?
    见 题425



414. 为什么HTTP1.1中使用Cache-Control代替Expires？（见 题425）
    （1）现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略

    （2）到期时间是由服务端生成的，但是客户端时间可能跟服务端时间有误差，这就会导致缓存命中的误差。
       所以HTTP 1.1 的版本，使用Cache-Control替代

    （3）解决：建议Expires结合Cache-Control一起使用。



413. 强缓存和协商缓存知道吗？（见 题425）
    ———— https://www.cnblogs.com/wonyun/p/5524617.html



412. HTTP1.0和HTTP1.1相关 （见 题488） ———— https://www.jianshu.com/p/be29d679cbff



411. TCP和UDP的区别 ———— https://www.cnblogs.com/gaopeng527/p/5255827.html
    ———— https://www.cnblogs.com/xiaomayizoe/p/5258754.html （更加相近）



410. 函数节流（throttle）和函数防抖（debounce）知道吗，区别是什么 （见 题431） ———— http://www.webfront-js.com/articaldetail/99.html



409. 数组去重方法
    arr = [...new Set(arr)]



408. 如果给a,b,c,d四个时间，执行时间分别为1，2，3，4，怎么样做才能在abc都在执行完后再执行d，除了使用promise还能使用什么方法



407. promise是如何解析异步操作的? (题480 有疑问)



406. 什么是异步？
    ———— https://www.cnblogs.com/ly-china/p/5433702.html（异步）



405. 线程和进程的区别
    ———— https://www.zhihu.com/question/25532384?sort=created （知乎自古都大神）
    进程是资源分配的最小单位，线程是CPU调度的最小单位



404. transition生命周期



403. vue-router不能解决情况和边界情况？
    ———— https://cn.vuejs.org/v2/guide/components-edge-cases.html



402. PWA ———— https://segmentfault.com/a/1190000012353473?utm_source=tag-newest
    （1）.对于 PWA 来说，用户体验才是核心。PWA 不是一项具体的技术，他是应用了一系列技术进行使用体验优化后的Web APP，具有与Native App 一致的用户体验，能够添加主屏图标、离线可用、接收离线通知等。具体详情查看 Demo 演示。

    （2）可靠  一方面是指 PWA 的安全性，PWA 只能运行在 HTTPS 上；另一方面是指在网络不稳定或者没网情况下，PWA 依然可以访问。

    （3）快速  快速响应用户的交互行为，并且具有平滑流畅的动画、加载速度、渲染速度和渲染性能等。

    （4）用户粘性  通过添加到桌面以及离线消息推送，能带来用户的第二次访问，并且依靠良好的用户体验吸引用户再次访问。



401. vue的生命周期
    见 题170



400. vue diff算法 ———— https://segmentfault.com/a/1190000008782928



399. tcp ip分成（见 题451） ———— https://blog.csdn.net/xiangyuenacha/article/details/83544035
    （1）网络接口层，TCP/IP模型的最底层是网络接口层，它包括了能使用TCP/IP与物理网络进行通信的协议，对应OSI模型的物理层和数据链路层。）

    （2）网际层又称网络层，负责相邻计算机之间的通信。网络要完成源路主到目的主机传输路径的选择。
        IP（Internet Protocol）
        ICMP（Internet Control Message Protocol）
        IGMP（Internet Group Management Protocol）
        ARP（Address Resolution Protocol）/RARP

    （3）TCP/IP的传输层与OSI的传输层类似，它的根本任务是提供端到端的通信，传输层对信息流具有调节作用，提供可靠传输，确保数据能够正确到达。
        TCP（Transmission Control Protocol）
        UDP（User Datagram Protocol）

    （4）在TCP/IP模型中，应用层是最高层，它对应OSI参考模型中的会话层、表示层和应用层。它使用户的程序访问网络，并获得各种网络服务，如WEB浏览、电子邮件等。
        TELET（远程终端协议）
        FTP（文件传输协议）
        SMTP（简单邮件传输协议）
        DNS（域名系统）
        DHCP（动态主机配置协议）
        RIP（路由信息协议）
        HTTP（超文本传输协议）
        SNMP（简单网络管理协议）

    （5）常见端口号
        HTTP： 80
        DNS： 53



398. settimeout异步



397. Ajax返回204算是成功吗
   （1）HTTP RFC 2616中关于204的描述如下:
        If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent’s active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent’s active view.
        意思等同于请求执行成功，但是没有数据，浏览器不用刷新页面.也不用导向新的页面。如何理解这段话呢。还是通过例子来说明吧，假设页面上有个form，提交的url为http-204.htm，提交form，正常情况下，页面会跳转到http-204.htm，但是如果http-204.htm的相应的状态码是204，此时页面就不会发生转跳，还是停留在当前页面。另外对于a标签，如果链接的页面响应码为204，页面也不会发生跳转。

    （2）无body、content-length=0



396. Ajax如何实现的
     （1）从代码我们看出：首先我们创建一个 XMLHttpRequest 对象（由于浏览器不同需要 相应判断处理），设置相应的请求信息（通过open来做，例如请求地址等 设置 ）；然后我们绑定 onreadystatechange 事件，在这个事件中我们根 据服务器返回状态的不同来做出不同处理，这其中主要是请求成功后接收相应的返回值来通过 javascript 对客户端做出相应操作（我 们只是使显示有关信息）；最后我们发送这个请 求（通过send方法）。
    （2）通过上面说 明和代码实现我们发现事实上整个 Ajax 的无刷新功能就是利用 XMLHttpRequest 的异步请求来完成的。关键 就是我们了解XMLHttpRequest的相关成员信息。当然，我们上面说实际开发中如果在手动写这些代码就太不划算了，我们可以选择合适的框架来进行 Ajax开发。OK，就到这里吧！



395. 有哪些状态码（见 题513） ———— https://www.cnblogs.com/jly144000/archive/2017/12/07/7998615.html



394. TCP和UDP（见 题411）———— https://www.cnblogs.com/gaopeng527/p/5255827.html



393. 应用层协议有哪些 （见 题399）
     TELET（远程终端协议）
     FTP（文件传输协议）
     SMTP（简单邮件传输协议）
     DNS（域名系统）
     DHCP（动态主机配置协议）
     RIP（路由信息协议）
     HTTP（超文本传输协议）
     SNMP（简单网络管理协议）



392. reflow和repaint ———— https://segmentfault.com/a/1190000002629708
    （1）浏览器步骤
        a. 解析HTML以构建DOM树：渲染引擎开始解析HTML文档，转换树中的html标签或js生成的标签到DOM节点，它被称为 -- 内容树。
        b. 构建渲染树：解析CSS（包括外部CSS文件和样式元素以及js生成的样式），根据CSS选择器计算出节点的样式，创建另一个树 —- 渲染树。
        c. 布局渲染树: 从根节点递归调用，计算每一个元素的大小、位置等，给每个节点所应该出现在屏幕上的精确坐标。
        d. 绘制渲染树: 遍历渲染树，每个节点将使用UI后端层来绘制。

    （2）概念
        对于DOM结构中的各个元素都有自己的盒子（模型），这些都需要浏览器根据各种样式（浏览器的、开发人员定义的等）来计算并根据计算结果将元素放到它该出现的位置，这个过程称之为reflow；当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来后，浏览器于是便把这些元素都按照各自的特性绘制了一遍，于是页面的内容出现了，这个过程称之为repaint。

    （3）优化
        a. 不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className：
        // 不好的写法
            var left = 10,
            top = 10;
            el.style.left = left + "px";
            el.style.top  = top  + "px";
        // 推荐写法
            el.className += " theclassname";
            把 DOM 离线后修改。如：
            a> 使用 documentFragment 对象在内存里操作 DOM。
            b> 先把 DOM 给 display:none (有一次 repaint)，然后你想怎么改就怎么改。比如修改 100 次，然后再把他显示出来。
            c> clone 一个 DOM 节点到内存里，然后想怎么改就怎么改，改完后，和在线的那个的交换一下。

        b. 不要把 DOM 节点的属性值放在一个循环里当成循环里的变量。不然这会导致大量地读写这个结点的属性。

        c. 尽可能的修改层级比较低的 DOM节点。当然，改变层级比较底的 DOM节点有可能会造成大面积的 reflow，但是也可能影响范围很小。

        d. 为动画的 HTML 元件使用 fixed 或 absoult 的 position，那么修改他们的 CSS 是会大大减小 reflow 。

        e. 千万不要使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。



391. 401状态码
    未授权,请求要求身份验证，对于登录后请求的网页，服务器可能返回此响应，用于认证，而不是授权，用于认证丢失或不正确的情况



390. css动画优化 ———— https://www.jb51.net/article/147736.htm（参考网站）
    概念：
        主线程（主线程的渲染流程，可以参考浏览器渲染网页的流程）
        合成线程
    优化方案：
        a. 尽量使用 transform 当成动画熟悉，避免使用 height,width,margin,padding 等；
        b. 要求较高时，可以开启浏览器开启 GPU 硬件加速。
        c. 尽可能多的利用硬件能力，如使用3D变形来开启GPU加速
        d. 尽可能多的使用opacity 和 transform
        e. 尽可能的让动画元素不在文档流中，以减少重排
        f. 动画过程有闪烁（通常发生在动画开始的时候），可以尝试下面的Hack
            -webkit-backface-visibility: hidden;
            -moz-backface-visibility: hidden;
            -ms-backface-visibility: hidden;
            backface-visibility: hidden;
            -webkit-perspective: 1000;
            -moz-perspective: 1000;
            -ms-perspective: 1000;
            perspective: 1000;



389. last-modifined，etg怎么样判断
    （1）Last-Modified(response header) / If-Modified-Since(request header用来发送last-modified)

    （2）Etag(服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）) / If-None-Match(发送Etag)。（优先级高于Last-Modified  /  If-Modified-Since）




388. 盒子模型（见 题510） ———— https://www.cnblogs.com/chengzp/p/cssbox.html



387. 垂直居中，水平居中
    （1）垂直参考题 508
        a. 把要垂直居中的元素相对于父元素绝对定位，top和bottom设为相等的值，我这里设成了0，当然你也可以设为99999px或者-99999px无论什么，只要两者相等就行，这一 步做完之后再将要居中元素的margin设为0 auto
            position: absolute;
            top: 0;
            bottom: 0;
            margin: auto;
        b. parent -
             display: flex;
             align-items: center; /*定义body的元素垂直居中*/
             justify-content: center; /*定义body的里的元素水平居中*/
             // 垂直居中
             display: flex;
             flex-direction: column;
             justify-content: center;
       c. <div id="box">
                <div id="child">我也是一段测试文本</div>
            </div>
            文字居中 宽高占满
             parent - display: table;
              child  - display: table-cell;
                       vertical-align: middle;
       d. parent - line-height: 300px;
               child  - display:inline-block; transform:translateY(50%);
               parent - line-height: 300px;
               child  - display:inline-block; vertical-align: middle;

    （2）水平居中
        a. text-align
        a. margin: 0 auto;
        c. position: absolute;
        d. display：inline-block;（或display:inline）和text-align:center;实现水平居中




386. css性能 ———— https://www.cnblogs.com/xiaoloulan/p/5801663.html
    （1）css的匹配原理不是从左到右的，而是从右到左的
    （2）!important > 行内样式 > ID选择器 > 类选择器 > 元素 > 通配符 > 继承 > 浏览器默认属性
    （3）避免使用@import， 避免AlphaImageLoader滤镜， 避免CSS表达式， 避免通配选择器， 移除无匹配的样式， 避免类正则的属性选择器 ———— https://www.cnblogs.com/CloverH/p/5033475.html
    （4）优化css提高性能 ———— https://www.cnblogs.com/xiaoloulan/p/5801663.html
        a. 减少css嵌套，最好不要套三层以上，一般情况下块级元素加上类，里面的内联元素不用加，css写的时候块级class套内联tag，这样不仅可以减少css文件大小，还能减少性能浪费。
        b. 不要在ID选择器前面进行嵌套，ID本来就是唯一的而且人家权值那么大，前方嵌套完全是浪费性能。
        c. 建立公共样式类，把长段相同样式提取出来作为公共类使用，比如我们常用的清除浮动，单行超出显示省略号等等等，当然如果你使用sass，继承会让你更加方便。
        d. 缩写css，其中包括缩写maigin，padding，颜色值等等，要是有两个或者两个以上的margin-****，写成margin: * * * *有助于文件大小。
        e. 减少通配符*或者类似[hidden="true"]这类选择器的使用，挨个查找所有...这性能能好吗？当然重置样式这些必须的东西是不能少的。
        f. 不要在类名前面加上标签名：别使用p.ty_p 来进行定位，这样往往效率更差，类名应该在全局范围除非公用是唯一的，所以这种做法是应该便面的。
        g. 巧妙运用css的继承机制，在css中很多属性是可以继承的比如颜色字体等等，父节点定义了，子节点就无需定义。
        h. 拆分出公共css文件，对于比较大的项目我们可以将大部分页面的公共结构的样式提取出来放到单独css文件里，这样一次下载后就放到缓存里，当然这种做法会增加请求，具体做法应以实际情况而定。
        i. 不用css表达式，可能大家接触比较少，但是要记住的是无论我们怎么炫酷，到了最后都是静态的，所以表达式只是让你的代码显得更加炫酷，但是他对性能的浪费可能是超乎你的想象的，因为它并不只是计算一次，一些小的事件可能都会增加它为了有效准确而进行计算求值的次数。
        j. 少用css rest，可能你会觉得重置样式是规范，但是其实其中有很多的操作是不必要不友好的，有需求有兴趣的朋友可以选择normolize.css
        k. cssSprite，合成所有icon图片，用宽高加上bacgroud-position的背景图方式显现出我们要的icon图，这是一种十分实用的技巧，极大减少了http请求。



385. webpack css兼容 ———— https://www.cnblogs.com/hezihao/p/8028856.html
    postcss-loader autoprefixer



384. 浏览器兼容 ？



383. gzip ———— https://segmentfault.com/a/1190000012571492 （Gzip 和一些服务端的配置）
    （1）gzip能在压缩的基础上再进行压缩50%以上
    （2）不是每个浏览器都支持gzip的，如果知道客户端是否支持gzip呢，请求头中有个Accept-Encoding来标识对压缩的支持。客户端http请求头声明浏览器支持的压缩方式，服务端配置启用压缩，压缩的文件类型，压缩方式。当客户端请求到服务端的时候，服务器解析请求头，如果客户端支持gzip压缩，响应时对请求的资源进行压缩并返回给客户端，浏览器按照自己的方式解析，在http响应头，我们可以看到content-encoding:gzip，这是指服务端使用了gzip的压缩方式。
    （3）前面说过了，启用gzip需要客户端和服务端的支持，如果客户端支持gzip的解析，那么只要服务端能够返回gzip的文件就可以启用gzip了，现在来说一下几种不同的环境下的服务端如何配置
    （4）node读取的是生成目录中的文件，所以要先用webpack等其他工具进行压缩成gzip



382. 图片压缩



381. DNS ———— https://blog.csdn.net/w372426096/article/details/78484158
    ———— https://blog.csdn.net/u013309870/article/details/76301272
    （1）域名系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，,DNS（Domain  Name  System），意为域名解析协议。DNS是应用层协议，底层运用的是UDP协议。
    （2）前端优化
        a. DNS Prefetch，即DNS预获取，是前端优化的一部分。一般来说，在前端优化中与 DNS 有关的有两点： 一个是减少DNS的请求次数，另一个就是进行DNS预获取 。DNS Prefetching 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验。其中 Chrome 和 Firefox 3.5+ 内置了 DNS Prefetching 技术并对DNS预解析做了相应优化设置。所以 即使不设置此属性，Chrome 和 Firefox 3.5+ 也能自动在后台进行预解析 。
        DNS Prefetch 应该尽量的放在网页的前面，推荐放在 <meta charset="UTF-8"> 后面。具体使用方法如下：
        <meta http-equiv="x-dns-prefetch-control" content="on">
        <link rel="dns-prefetch" href="//www.zhix.net">
        <link rel="dns-prefetch" href="//api.share.zhix.net">
        <link rel="dns-prefetch" href="//bdimg.share.zhix.net">
        b. 注意： 需要注意的是，虽然使用 DNS Prefetch 能够加快页面的解析速度，但是也不能滥用，因为有开发者指出 禁用DNS 预读取能节省每月100亿的DNS查询 。如果需要禁止隐式的 DNS Prefetch，可以使用以下的标签：
         <meta http-equiv="x-dns-prefetch-control" content="off">

   （3）递归  和   跌代



380. 有没有用过代理？



379. 有没有抓过包



378. 长连接 ———— https://www.cnblogs.com/gotodsp/p/6366163.html
    在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：Connection:keep-alive。在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。
    HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。



377. 什么时候用local，什么时候用session和 storage



376. 缓存
    （1）HTTP缓存（见 题425） ———— http://www.cnblogs.com/chenqf/p/6386163.html
    （2）web缓存分为很多种，比如数据库缓存、代理服务器缓存、还有我们熟悉的CDN缓存，以及浏览器缓存。浏览器先向代理服务器发起Web请求，再将请求转发到源服务器。它属于共享缓存，所以很多地方都可以使用其缓存资源，因此对于节省流量有很大作用。
    （3）给文件设置一个很长的Cacha-Control也会带来其他的问题，最主要的问题是静态内容更新时，用户不能及时获得更新的内容。这时候就要使用hash的方法对文件进行命名，通过每次更新不同的静态文件名来消除强缓存的影响。



375. URL长度限制 ———— https://blog.csdn.net/woxueliuyun/article/details/41866611
    HTTP RFC2616协议没有规定URL的最大长度，但规定服务器如果不能处理太长的URL，就得返回414状态码（Request-URI Too Long）。
    HTTP RFC2616协议指出，某些旧的客户端或代理，可能无法处理超过255个字节的URI。
    HTTP协议没有规定URL的最大长度，那么URL的最大长度与用户的浏览器有关，同时和服务器能够处理的最大长度URL有关。
    站点地图协议（sitemap protocol），限制URL的长度是2048，如果你想让搜索引擎能够搜索到你，2048是最大极限了。
        ie 2083
        safari 80000 以上
        Firefox 65536
        Opera 190000 以上
        Chrome 8182
        Apache Server 8192



374. 一个项目可能要延期，怎么样处理



373. 一个网页很多很多页面，怎么样让用户体验好一点



372. 性能优化



370. 301 302
    301 永久性重定向，请求的URL已移走
    302 临时重定向



370. http状态码（见 题513） ———— https://www.cnblogs.com/jly144000/archive/2017/12/07/7998615.html



369. cookie长度限制
    IE6.0			IE7.0/8.0			Opera			FF	Safari		Chrome          Safari	        Chrome
    cookie个数  	每个域为20个   		每个域为50个  	每个域为30个  	每个域为50个   	没有个数限制   	每个域为53个
    cookie大小		4095个字节			4095个字节		4096个字节		4097个字节		4097个字节		4097个字节



368. cookie实现



367.觉得自己的不足



366. 看哪些技术网站



365. JS原型 —— https://www.jianshu.com/p/dee9f8b14771



364. 异步加载JS ———— https://www.cnblogs.com/hq233/p/7102549.html（只算是相对较好的）
    ———— https://blog.csdn.net/zhouziyu2011/article/details/60149590
    （1）同步模式，又称阻塞模式，会阻止浏览器的后续处理，停止了后续的解析，因此停止了后续的文件加载（如图像）、渲染、代码执行。
        js 之所以要同步执行，是因为 js 中可能有输出 document 内容、修改dom、重定向等行为，所以默认同步执行才是安全的。



363. HTTP请求头，响应头里面有哪些 ———— https://blog.csdn.net/qq_30553235/article/details/79282113



362. 打开连接到网页呈现的流程 ———— https://blog.csdn.net/dataiyangu/article/details/79946416







