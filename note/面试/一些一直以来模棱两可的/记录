** Viewport
    viewport 是用户网页的可视区域，手机浏览器是把页面放在一个虚拟的"窗口"（viewport）中，通常这个虚拟的"窗口"（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中（这样会破坏没有针对手机浏览器优化的网页的布局），用户可以通过平移和缩放来看网页的不同部分。
    一个常用的针对移动网页优化过的页面的 viewport meta 标签大致如下
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    width：控制 viewport 的大小，可以指定的一个值，如 600，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）。
    height：和 width 相对应，指定高度。
    initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。
    maximum-scale：允许用户缩放到的最大比例。
    minimum-scale：允许用户缩放到的最小比例。
    user-scalable：用户是否可以手动缩放。



@media
    @media 媒体类型and （媒体特性）{你的样式}
    @media screen and (min-width:600px) and (max-width:900px){
      body {background-color:#f5f5f5;}
    }
    @media only screen and (orientation: landscape) {
        body {
            background-color: lightblue;
        }
    }


** flex
    （0）设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。

    （1）容器的属性
        a. flex-direction属性决定主轴的方向（即项目的排列方向）。
            row（默认值）：主轴为水平方向，起点在左端。
            row-reverse：主轴为水平方向，起点在右端。
            column：主轴为垂直方向，起点在上沿。
            column-reverse：主轴为垂直方向，起点在下沿。
        b. flex-wrap属性定义，如果一条轴线排不下，如何换行
            nowrap（默认）：不换行。
            wrap：换行，第一行在上方。
            wrap-reverse：换行，第一行在下方。
        c. flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap
            flex-flow: <flex-direction> || <flex-wrap>;
        d. justify-content属性定义了项目在主轴上的对齐方式。
            flex-start（默认值）：左对齐
            flex-end：右对齐
            center： 居中
            space-between：两端对齐，项目之间的间隔都相等。
            space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。
        e. align-items属性定义项目在交叉轴上如何对齐。
            flex-start：交叉轴的起点对齐。
            flex-end：交叉轴的终点对齐。
            center：交叉轴的中点对齐。
            baseline: 项目的第一行文字的基线对齐。
            stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。
        d. align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。
            flex-start：与交叉轴的起点对齐。
            flex-end：与交叉轴的终点对齐。
            center：与交叉轴的中点对齐。
            space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
            space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
            stretch（默认值）：轴线占满整个交叉轴。

        （2）项目的属性
            a. order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。
            b. flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。,flex-grow: <number>; /* default 0 */ 有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。
            c. flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。负值对该属性无效。
            d. align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch


** BFC, Block Formatting Context 直译为“块级格式化上下文” ———— https://www.cnblogs.com/chengzp/p/cssbox.html
    BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。
    （1）创建
        float属性不为none（脱离文档流）
        position为absolute或fixed
        display为inline-block,table-cell,table-caption,flex,inine-flex
        overflow不为visible
        根元素

    （2）原理
        内部的box会在垂直方向，一个接一个的放置
        每个元素的margin box的左边，与包含块border box的左边相接触（对于从做往右的格式化，否则相反）
        box垂直方向的距离由margin决定，属于同一个bfc的两个相邻box的margin会发生重叠
        bfc的区域不会与浮动区域的box重叠
        bfc是一个页面上的独立的容器，外面的元素不会影响bfc里的元素，反过来，里面的也不会影响外面的
        计算bfc高度的时候，浮动元素也会参与计算

    （3）应用
       自适应两栏布局
            div {
                height: 100px;
                width:180px;
            }
            .left{
                background:pink;
                float: left;
            }
            .center{
                background:lightyellow;
                overflow:hidden;
                width: auto;
            }
            .right{
                background: lightblue;
                float:right; /* float:left =》 最右边自适应 */
            }
            <div class="left">
            </div>
            <div class="right">
            </div>
            <div class="center">
            </div>


            .left {
                width: 200px;
                float: left;
                background-color: green;
            }
            .right {
                margin-left: 200px;
                background-color: blue;
            }
            <div class="left">
                    left
                </div>
                <div class="right">
                    right
                </div>
       清除内部浮动
       防止垂直margin重叠
