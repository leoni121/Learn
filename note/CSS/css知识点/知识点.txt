** css 参考手册
    ———— https://www.css88.com/book/css/



** 元素选择器优先级
    !important > 行内样式 > ID选择器 > 类选择器 > 元素 = 伪类选择器 > 通配符 > 继承 > 浏览器默认属性



** @import

    1.html中
        <style>
            @import "";
            @import url("");
            @import url();
         </style>

    2.css中
        @import "";
        @import url("");
        @import url();

    3.避免css@import
      概述
        在外部样式表中使用css@import可以在加载网页时增加额外的延迟。
      细节
          css@import允许样式表导入其他样式表。当从外部样式表中使用css@import时，浏览器无法并行下载样式表，这会给整个页面加载增加额外的往返时间。例如，first.css包含以下内容：
          @import url（“second.css”）。
          浏览器必须先下载、分析和执行first.css，然后才能发现它需要下载second.css。
      建议
          使用<link>标记而不是css@import。这允许浏览器并行下载样式表，从而加快页面加载时间：
          <link rel=“stylesheet”href=“first.css”>
          <link rel=“stylesheet”href=“second.css”>

    4.@import 是CSS2.1 提出的，老的浏览器不支持

    5.link 引用的CSS会在页面被加载的时候同时加载；@import 引用的CSS会等到页面全部被下载完再被加载。

    6.javascript 可以控制到 link, 但@import 却无法控制


** @supports
    ———— https://www.css88.com/book/css/rules/@supports.htm


** @page
    ———— 设置页面容器的版式，方向，边空等
   @charset
    ———— 字符编码。如：@charset "utf-8";
        ———— https://www.css88.com/book/css/


** url中的引号问题(@import url(''), @import url(), background-image.....)

    1.安全 => 不加的话容易被xss攻击， ""意味着是字符串,但是不加引号的话,传过来的万一是' );url("http://www.xss.xss") '就有可能把cookie什么的可能泄露出去

    2.低系列 IE 不兼容带有引号的写法（网友一个说法是：不加引号且路径里面有空格，老IE认不出）

    3.最好加上，html标签的属性也同理。

    4.如无必要，省略 url 中的引号（出自《CSS 创作指南（Beta）》）；

    5.不写引号完全合法，通常在 CSS 压缩工具中也会去掉 url() 函数中的引号。

    6.不加引号会有一些 edge cases（特殊的 escape 规则等），增加了认知负担，加了引号之后就是常见的字符串规则了；

    7.根据标准原文，不带引号的写法是 “legacy syntax”，虽然出于兼容性考虑肯定不会去掉，但肯定不算是推荐写法；

    8.url() 实质上是一个 CSS 函数，它可以接受第二个参数 <url-modifier>，如果用不带引号的写法的话是没办法传第二个参数进去的；


** 滚动条样式 ———— https://blog.csdn.net/zh_rey/article/details/72473284


** 边距重叠 ———— https://www.cnblogs.com/chengzp/p/cssbox.html
    问题：父元素没有设置margin-top，而子元素设置了margin-top：20px;可以看出，父元素也一起有了边距
    解决：BFC（块级格式化上下文）


**  模态框
       top: 0;
       bottom: 0;
       left: 0;
       right: 0;


** 垂直居中（MDN） ———— https://css-tricks.com/centering-css-complete-guide/
    margin: 0 auto;
    top: 0;
    bottom: 0;
    top和bottom设为相等的值



** normalize.css ———— https://github.com/necolas/normalize.css
    css rest（什么是） ———— https://cssreset.com/what-is-a-css-reset
    使用CSS重置，CSS作者可以强制每个浏览器将其所有样式重置为null，从而尽可能避免跨浏览器的差异。
    normalize 和 reset 区别 ———— https://www.cnblogs.com/webpush/p/4974063.html



** 首先，在W3C标准解析中，float 会使元素脱离文档流，并且浮动元素会生成一个块级框，而不论它是块级或者行内元素
   对于这个块级框我是这样理解的：它把这个元素变成了一个（类似）行内块级元素，也就是inline-block，当你把题中
   float: left; 替换为 display: inline-block;
   你会发现，会有一样的结果，为什么说类似呢，因为inline-block 元素之间会默认产生空白符，而float 之间却没有
   既然和inline-block 类似，那么当然可以设置宽高了，虽然float 使元素脱离文档流，但是并不影响div 仍然是它的父元素
   因此.height: 100%;也就是继承了父元素的高度，200px
   而width: auto;其实是坑人的，因为元素的默认width 就是auto，而inline-block 元素的宽是内容宽度
   这个时候我们看子元素<i>,它设置了position: absolute;同样脱离的文档流，它并不会影响父元素，所以span 的width:0px;



** 盒模型（MDN） ———— https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model

